delayLimit = 0.11
byteSize = 8

delays = [0.151, 0.15, 0.101, 0.199, 0.216, 0.134, 0.15, 0.1, 0.151, 0.1, 0.151, 0.151, 0.15, 0.15, 0.15, 0.2, 0.151, 0.101, 0.15, 0.2, 0.15, 0.101, 0.15, 0.15, 0.2, 0.151, 0.15, 0.15, 0.15, 0.2, 0.201, 0.151, 0.1, 0.15, 0.15, 0.149, 0.151, 0.15, 0.1, 0.151, 0.15, 0.15, 0.1, 0.1, 0.151, 0.151, 0.15, 0.151, 0.15, 0.101, 0.199, 0.15, 0.15, 0.204, 0.15, 0.151, 0.1, 0.149, 0.151, 0.15, 0.15, 0.15, 0.2, 0.152, 0.151, 0.198, 0.202, 0.151, 0.15, 0.15, 0.2, 0.101, 0.15, 0.2, 0.199, 0.152, 0.151, 0.1, 0.1, 0.1, 0.201, 0.15, 0.201, 0.1, 0.201, 0.149, 0.201, 0.15, 0.101, 0.15, 0.15, 0.2, 0.15, 0.101, 0.151, 0.099, 0.151, 0.1, 0.152, 0.149, 0.15, 0.1, 0.151, 0.1, 0.201, 0.198, 0.202, 0.149, 0.201, 0.15, 0.15, 0.151, 0.15, 0.15, 0.15, 0.1, 0.15, 0.2, 0.1, 0.101, 0.2, 0.201, 0.15, 0.15, 0.101, 0.15, 0.101, 0.149, 0.201, 0.15, 0.1, 0.101, 0.15, 0.15, 0.103, 0.198, 0.201, 0.149, 0.15, 0.149, 0.101, 0.151, 0.099, 0.15, 0.15, 0.15, 0.1, 0.1, 0.151, 0.1, 0.1, 0.15, 0.149, 0.15, 0.202, 0.199, 0.101, 0.149, 0.15, 0.1, 0.15, 0.1, 0.1, 0.1, 0.1, 0.201, 0.2, 0.15, 0.1, 0.1, 0.1, 0.2, 0.151, 0.1, 0.15, 0.15, 0.1, 0.201, 0.1, 0.2, 0.201, 0.15, 0.149, 0.15, 0.15, 0.1, 0.15, 0.15, 0.2, 0.1, 0.103, 0.199, 0.15, 0.201, 0.151, 0.15, 0.15, 0.099, 0.151, 0.1, 0.1, 0.101, 0.1, 0.1, 0.199, 0.151, 0.151, 0.151, 0.201, 0.149, 0.15, 0.151, 0.151, 0.15, 0.15, 0.151, 0.1, 0.149, 0.1, 0.201, 0.099, 0.15, 0.214, 0.036, 0.151, 0.15, 0.15, 0.101, 0.2, 0.1, 0.151, 0.198, 0.203, 0.148, 0.15, 0.15, 0.1, 0.2, 0.15, 0.151, 0.149, 0.1, 0.1, 0.2, 0.2, 0.1, 0.154, 0.098, 0.149, 0.1, 0.151, 0.1, 0.1, 0.1, 0.15, 0.151, 0.2, 0.201, 0.1, 0.15, 0.099, 0.151, 0.154, 0.146, 0.15, 0.199, 0.201, 0.1, 0.1, 0.201, 0.099, 0.1, 0.15, 0.151, 0.101, 0.15, 0.151, 0.099, 0.15, 0.1, 0.15, 0.1, 0.1, 0.2, 0.151, 0.15, 0.2, 0.101, 0.1, 0.1, 0.151, 0.149, 0.101, 0.15, 0.151, 0.101, 0.15, 0.1, 0.151, 0.15, 0.201, 0.199, 0.102, 0.149, 0.151, 0.199, 0.101, 0.15, 0.151, 0.15, 0.151, 0.1, 0.15, 0.1, 0.099, 0.152, 0.2, 0.149, 0.15, 0.15, 0.151, 0.2, 0.151, 0.149, 0.175, 0.126, 0.15, 0.201, 0.15, 0.15, 0.15, 0.1, 0.15, 0.201, 0.1, 0.15, 0.15, 0.15, 0.1, 0.1, 0.15, 0.201, 0.15, 0.151, 0.15, 0.2, 0.1, 0.1, 0.151, 0.149, 0.1, 0.1, 0.101, 0.15, 0.15, 0.15, 0.1, 0.2, 0.2, 0.101, 0.2, 0.101, 0.15, 0.15, 0.2, 0.1, 0.1, 0.165, 0.137, 0.15, 0.15, 0.2, 0.2, 0.15, 0.151, 0.2, 0.15, 0.1, 0.2, 0.1, 0.151, 0.1, 0.1, 0.151, 0.149, 0.2, 0.154, 0.197, 0.15, 0.15, 0.15, 0.15, 0.152, 0.149, 0.151, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.15, 0.1, 0.101, 0.15, 0.1, 0.1, 0.151, 0.15, 0.151, 0.15, 0.101, 0.1, 0.15, 0.15, 0.2, 0.151, 0.201, 0.15, 0.101, 0.2, 0.15, 0.201, 0.15, 0.1, 0.1, 0.15, 0.151, 0.15, 0.15, 0.15, 0.2, 0.15, 0.149, 0.151, 0.151, 0.1, 0.15, 0.1, 0.1, 0.201, 0.15, 0.1, 0.15, 0.151, 0.15, 0.2, 0.151, 0.1, 0.2, 0.1, 0.151, 0.1, 0.15, 0.15, 0.2, 0.2, 0.15, 0.2, 0.151, 0.201, 0.1, 0.151, 0.15, 0.2, 0.15, 0.1, 0.101, 0.15, 0.1, 0.2, 0.15, 0.15, 0.151, 0.15, 0.15, 0.15, 0.2, 0.15, 0.1]

# try both combinations
message = ["",""]
for delt in delays:
    message[0] += "1" if delt>delayLimit else "0"
    message[1] += "0" if delt>delayLimit else "1"

# decode the message
decodedMessage = ["",""]; byte = ["",""]; finalMessage = ""
for version in range (0,2): # for each version
    for i in range(0,len(message[version]),byteSize): # for each byte
        byte[version] = message[version][i:(i+byteSize)] # isolate the byte
        if( 32 <= int(byte[version],2) <= 126 ): # if printable ascii character
            decodedMessage[version] += chr(int(byte[version],2)) # then add to decoded message
            if decodedMessage[version].endswith("EOF"): # if EOF
                finalMessage = decodedMessage[version][:-3] # then make final message
                break # and stop decoding

if finalMessage == "": # if no EOF
    finalMessage = "ERROR DECODING. CURRENT MESSAGE: " # say error and what you DID get
    finalMessage += decodedMessage[0] if len(decodedMessage[0])>len(decodedMessage[1]) else decodedMessage[1]

# print decoded message
print("{}\n".format(finalMessage))
